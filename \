<!doctype html>
<html lang="en">

	<head>
		<meta charset="utf-8">

		<title>Filling the Flask</title>

		<meta name="description" content="Lets look at some of the most common libraries used to build the powerful simplicity of Flask into a full featured web application without having to reinvent the wheel each time.">
		<meta name="author" content="Jason A Myers">

		<meta name="apple-mobile-web-app-capable" content="yes" />
		<meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

		<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui">

		<link rel="stylesheet" href="css/reveal.css">
		<link rel="stylesheet" href="css/theme/solarized.css" id="theme">

		<!-- Code syntax highlighting -->
		<link rel="stylesheet" href="lib/css/solarized_light.css">

		<!-- Printing and PDF exports -->
		<script>
			var link = document.createElement( 'link' );
			link.rel = 'stylesheet';
			link.type = 'text/css';
			link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css';
			document.getElementsByTagName( 'head' )[0].appendChild( link );
		</script>

		<!--[if lt IE 9]>
		<script src="lib/js/html5shiv.js"></script>
		<![endif]-->
	</head>

	<body>

		<div class="reveal">

			<!-- Any section element inside of this container is displayed as a slide -->
			<div class="slides">
        <section>
          <section>
            <h1>Introduction to SQLALchemy ORM</h1>
            <p>
              <small>Created by <a href="http://www.jasonamyers.com">Jason A Myers</a> / <a href="http://twitter.com/jasonamyers">@jasonamyers</a></small>
            </p>
          </section>
          <section>
            <h1>WARNING!</h1>
            <img data-src="adict.gif" />
          </section>
          <section>
            <h2>SQLAlchemy</h2>
            <p>
              <ul>
                <li>Core - Schema centric</li>
                <li>ORM - User Model</li>
              </ul>
            </p>
          </section>
        </section>
        <section>
          <section>
            <h2>Installing</h2>
            <p>pip install sqlalchemy</p>
          </section>
          <section>
            <h2>Connecting and Establishing a Session</h2>
            <img src="data.png" />
          </section>
          <section>
            <h2>Connecting</h2>
            <pre><code data-trim>
from sqlalchemy import create_engine

engine = create_engine('sqlite:///:memory:')
            </code></pre>
          </section>
          <section>
            <h2>Establishing a Session</h2>
            <pre><code data-trim>
from sqlalchemy.orm import sessionmaker

Session = sessionmaker(bind=engine)

session = Session()
            </code></pre>
          </section>
        </section>
				<section>
					<section>
						<h2>Defining Models</h2>
            <img height=500 src="store.jpg" />
					</section>
					<section>
						<h2>Model Base</h2>
            <p>Declarative Base</p>
            <pre><code>
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
            </code></pre>
					</section>
					<section>
						<h2>Cookie Model</h2>
            <pre><code data-trim>
from sqlalchemy import Column, Integer, Numeric, String

class Cookie(Base):
    __tablename__ = 'cookies'

    cookie_id = Column(Integer, primary_key=True)
    cookie_name = Column(String(50), index=True)
    cookie_recipe_url = Column(String(255))
    cookie_sku = Column(String(55))
    quantity = Column(Integer())
    unit_cost = Column(Numeric(12, 2))
            </code></pre>
					</section>
          <section>
            <h2>Persisting our Table</h2>
            <pre><code data-trim>
Base.metadata.create_all(engine)
            </code></pre>
          </section>
        </section>

        <section>
          <section>
            <h2>Inserting Data</h2>
            <img data-src="insert.gif" />
          </section>
          <section>
            <h2>Using the declarative default __init__</h2>
            <pre><code data-trim>
cc_cookie = Cookie(cookie_name='chocolate chip',
                   cookie_recipe_url='http://some.aweso.me/cookie/recipe.html',
                   cookie_sku='CC01',
                   quantity=12,
                   unit_cost=0.50)
            </code></pre>
          </section>
          <section>
            <h2>Adding to Session</h2>
            <pre><code data-trim>
session.add(cc_cookie)
session.commit()
            </code></pre>
          </section>
          <section>
            <h2>Accessing Attributes</h2>
            <pre><code data-trim>
print(cc_cookie.cookie_id)

1
            </code></pre>
          </section>
          <section>
            <h2>Bulk Inserts</h2>
            <pre><code data-trim>
c1 = Cookie(cookie_name='peanut butter',
            cookie_recipe_url='http://some.aweso.me/cookie/peanut.html',
            cookie_sku='PB01',
            quantity=24,
            unit_cost=0.25)
c2 = Cookie(cookie_name='oatmeal raisin',
            cookie_recipe_url='http://some.okay.me/cookie/raisin.html',
            cookie_sku='EWW01',
            quantity=100,
            unit_cost=1.00)
session.bulk_save_objects([c1,c2])
session.commit()
            </code></pre>
          </section>
          <section>
            <h2>Bulk Insert Differences</h2>
            <pre><code data-trim>
c1.cookie_id
            </code></pre>
          </section>
        </section>
        <section>
          <section>
            <h2>Queries</h2>
            <img data-src="question.jpg" />
          </section>
          <section>
            <h2>All the COOKIES!</h2>
            <pre><code data-trim>
cookies = session.query(Cookie).all()
print(cookies)

[Cookie(cookie_name='chocolate chip',
        cookie_recipe_url='http://some.aweso.me/cookie/recipe.html',
        cookie_sku='CC01', quantity=12, unit_cost=0.50),
 Cookie(cookie_name='peanut butter',
        cookie_recipe_url='http://some.aweso.me/cookie/peanut.html',
        cookie_sku='PB01', quantity=24, unit_cost=0.25),
 Cookie(cookie_name='oatmeal raisin',
        cookie_recipe_url='http://some.okay.me/cookie/raisin.html',
        cookie_sku='EWW01', quantity=100, unit_cost=1.00)]
            </code></pre>
          </section>
          <section>
            <h2>All the COOKIES! - Iterator</h2>
            <pre><code data-trim>
cookies = session.query(Cookie).all()
print(cookies)

Cookie(cookie_name='chocolate chip',
        cookie_recipe_url='http://some.aweso.me/cookie/recipe.html',
        cookie_sku='CC01', quantity=12, unit_cost=0.50)
Cookie(cookie_name='peanut butter',
        cookie_recipe_url='http://some.aweso.me/cookie/peanut.html',
        cookie_sku='PB01', quantity=24, unit_cost=0.25)
Cookie(cookie_name='oatmeal raisin',
        cookie_recipe_url='http://some.okay.me/cookie/raisin.html',
        cookie_sku='EWW01', quantity=100, unit_cost=1.00)
            </code></pre>
          </section>
          <section>
            <h2>Particular Attributes</h2>
            <pre><code data-trim>
print(session.query(Cookie.cookie_name, Cookie.quantity).first())

('chocolate chip', 12)
            </code></pre>
          </section>
          <section>
            <h2>Order by</h2>
            <pre><code data-trim>
for cookie in session.query(Cookie).order_by(Cookie.quantity):
    print('{:3} - {}'.format(cookie.quantity, cookie.cookie_name))

  12 - chocolate chip
  24 - peanut butter
 100 - oatmeal raisin
            </code></pre>
          </section>
          <section>
            <h2>Decending</h2>
            <pre><code data-trim>
from sqlalchemy import desc
for cookie in session.query(Cookie).order_by(desc(Cookie.quantity)):
      print('{:3} - {}'.format(cookie.quantity, cookie.cookie_name))
            </code></pre>
          </section>
          <section>
            <h2>Limiting</h2>
            <pre><code data-trim>
query = session.query(Cookie).order_by(Cookie.quantity).limit(2)
print([result.cookie_name for result in query])

['chocolate chip', 'peanut butter']
            </code></pre>
          </section>
          <section>
            <h2>Database Functions</h2>
            <pre><code data-trim>
from sqlalchemy import func

inv_count = session.query(func.sum(Cookie.quantity)).scalar()
print(inv_count)

136
            </code></pre>
          </section>
          <section>
            <h2>Database Functions Count</h2>
            <pre><code data-trim>
rec_count = session.query(func.count(Cookie.cookie_name)).first()
print(rec_count)

(3, 0)
            </code></pre>
          </section>
          <section>
            <h2>Labeling</h2>
            <pre><code data-trim>
rec_count = session.query(func.count(Cookie.cookie_name) \
                          .label('inventory_count')).first()
print(rec_count.keys())
print(rec_count.inventory_count)

['inventory_count']
5
            </code></pre>
          </section>
          <section>
            <h2>filter_by</h2>
            <pre><code data-trim>
record = session.query(Cookie).filter_by(cookie_name='chocolate chip').first()
print(record)

Cookie(cookie_name='chocolate chip',
       cookie_recipe_url='http://some.aweso.me/cookie/recipe.html',
       cookie_sku='CC01', quantity=12, unit_cost=0.50)
            </code></pre>
          </section>
          <section>
            <h2>filter</h2>
            <pre><code data-trim>
record = session.query(Cookie).filter(Cookie.cookie_name == 'chocolate chip').first()
print(record)
            </code></pre>
          </section>
        </section>
        <section>
          <section>
            <h2>User Authentication</h2>
            <img height=500 data-src="key.jpg" />
          </section>
          <section>
            <h2>Flask-Login</h2>
            <p><ul>
              <li>Simplifies logging users in and out</li>
              <li>Secures view functions with decorators</li>
              <li>Protects session cookies</li>
            </ul></p>
            <pre><code data-trim>pip install flask-login</code></pre>
          </section>
          <section>
            <h2>flaskfilled/__init__.py</h2>
            <pre><code data-trim>
from flask.ext.login import LoginManager

login_manager = LoginManager()

def create_app(config_name):
    app = Flask(__name__)
    app.config.from_object(config[config_name])

    db.init_app(app)
    login_manager.setup_app(app)

    from .main import main as main_blueprint
    app.register_blueprint(main_blueprint)

    from .auth import auth as auth_blueprint
    app.register_blueprint(auth_blueprint, url_prefix='/auth')

    return app
            </code></pre>
          </section>
          <section>
            <h2>models.py</h2>
            <pre><code data-trim>
from werkzeug.security import generate_password_hash, check_password_hash

from flaskfilled import login_manager

class User(db.Model, UserMixin):
    __tablename__ = 'users'

    id = db.Column(db.Integer(), primary_key=True)
    username = db.Column(db.String, primary_key=True)
    password = db.Column(db.String)
    authenticated = db.Column(db.Boolean, default=False)
            </code></pre>
          </section>
          <section>
            <h2>User Model required methods</h2>
            <h3>Provided by UserMixin</h3>
            <pre><code data-trim>
def is_active(self):
    return True

def get_id(self):
    return self.id

def is_authenticated(self):
    return self.authenticated

def is_anonymous(self):
    return False
            </code></pre>
          </section>
          <section>
            <h2>User model password handling</h2>
            <pre><code data-trim>
  @property
  def password(self):
      raise AttributeError('password is not a readable attribute')

  @password.setter
  def password(self, password):
      self.password_hash = generate_password_hash(password)

  def verify_password(self, password):
      return check_password_hash(self.password_hash, password)
            </code></pre>
          </section>
          <section>
            <h2>Setting up the Auth Blueprint</h2>
            <h3>auth/__init__.py</h3>
            <pre><code data-trim>
from flask import Blueprint

auth = Blueprint('auth', __name__)

from . import views
            </code></pre>
          </section>
          <section>
            <h2>auth/views.py</h2>
            <pre><code data-trim>
from flask import render_template, redirect, request, url_for, flash

from flask.ext.login import login_user, logout_user, login_required

from . import auth
from flaskfilled.models import User
            </code></pre>
          </section>
          <section>
            <h2>login</h2>
            <pre><code data-trim>
@auth.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        user = User.query.filter_by(username=username).first()
        if user is not None and user.verify_password(password):
            login_user(user)
            next = request.args.get('next')
            return redirect(next or url_for('main.index'))
        else:
            flash('Wrong username or password.')
    return render_template('auth/login.html')
            </code></pre>
          </section>
          <section>
            <h2>logout</h2>
            <pre><code data-trim>
@auth.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.')
    return redirect(url_for('main.index'))
            </code></pre>
          </section>
          <section>
            <h2>login template</h2>
            <pre><code data-trim>
{% extends "base.html" %}

{% block title %}Login{% endblock %}

{% block page_content %}
<div class="page-header">
    <h1>Login</h1>
</div>
<div class="col-md-4">
    <form action="">
    Username: <input type="text" name="username"><br>
    Password: <input type="password" name="password"><br>
    <input type="submit">
    </form>
    <br>
    <p>Forgot your password? <a href="{{ url_for('auth.password_reset_request') }}">Click here to reset it</a>.</p>
    <p>New user? <a href="{{ url_for('auth.register') }}">Click here to register</a>.</p>
</div>
{% endblock %}
            </code></pre>
          </section>
          <section>
            <h2>main/views.py</h2>
            <pre><code data-trim>
from flask import render_template

from . import main


@main.route('/', methods=['GET'])
def index():
    return render_template('main/index.html')
            </code></pre>
          </section>
          <section>
            <h2>index template</h2>
            <pre><code data-trim>
{% extends "base.html" %}

{% block title %}The Index{% endblock %}

{% block page_content %}
{% if not current_user.is_authenticated() %}
  <p><a href="{{ url_for('auth.login') }}">Click here to login</a>.</p>
{% else %}
  <p><a href="{{ url_for('auth.logout') }}">Click here to logout</a>.</p>
{% endif %}
{% endblock %}
            </code></pre>
          </section>
          <section>
            <h2>Create Users Migration and Apply it</h2>
            <pre><code data-trim>
$ python manage.py db migrate -m "User"
  Generating /Users/jasonamyers/dev/flask-filled/migrations/versions/8d9327f04f_user.py ... done

$ python manage.py db upgrade
INFO  [alembic.migration] Running upgrade 586131216f6 -> 8d9327f04f, User
            </code></pre>
          </section>
          <section>
            <h2>Run Server</h2>
            <pre><code data-trim>
$ python manage.py runserver
            </code></pre>
          </section>
          <section>
            <img src=index.png />
          </section>
          <section>
            <img src=login.png />
          </section>
          <section>
            <img src=logged_in.png />
          </section>
          <section>
            <img src=logged_out.png />
          </section>
          <section>
            <img src=bad_auth.png />
          </section>
        </section>
        <section>
          <section>
            <h2>Forms...</h2>
            <img data-src="game_scroll_small.png" />
          </section>
          <section>
            <h2>Flask-WTF</h2>
            <p>
            <ul>
              <li>Validation</li>
              <li>CSRF protection</li>
              <li>File Uploads</li>
            </ul>
            <pre><code data-trim>pip install flask-wtf</code></pre>
            </p>
          </section>
          <section>
            <h2>auth/forms.py</h2>
            <p><pre><code data-trim>
from flask.ext.wtf import Form
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import Required, Length


class LoginForm(Form):
      username = StringField('username', validators=[Required(),
                                                     Length(1, 64)])
      password = PasswordField('Password', validators=[Required()])
      submit = SubmitField('Log In')
            </code></pre></p>
          </section>
          <section>
            <h2>auth/views.py</h2>
            <p><pre><code data-trim>
@auth.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user)
            next = request.args.get('next')
            return redirect(next or url_for('main.index'))
        else:
            flash('Wrong username or password.')
    return render_template('auth/login.html', form=form)
            </code></pre></p>
          </section>
          <section>
            <h2>templates/auth/login.html</h2>
            <p><pre><code data-trim>
{% block page_content %}
<div class="col-md-4">
    <form action="" method="POST">
      {{ form.csrf_token }}
      {% if form.csrf_token.errors %}
        <div class="warning">You have submitted an invalid CSRF token</div>
      {% endif %}
      {{form.username.label }}: {{ form.username }}
      {% if form.username.errors %}
        {% for error in form.username.errors %}
          {{ error }}
        {% endfor %}
        {% endif %}<br>
      {{form.password.label }}: {{ form.password }}
      {% if form.password.errors %}
        {% for error in form.password.errors %}
          {{ error }}
        {% endfor %}
        {% endif %}<br>
      {{ form.submit }}
    </form>
    <br>
</div>
            </code></pre></p>
          </section>
        </section>
        <section>
          <section>
            <h2>Authorization</h2>
            <img data-src="link-banned.png" />
          </section>
          <section>
            <h2>flask-principal</h2>
            <p><pre><code data-trim>pip install flask-principal</code></pre></p>
          </section>
          <section>
            <h2>__init__.py</h2>
            <p>
            <pre><code data-trim>
from flask.ext.principal import Principal

principal = Principal()


def create_app(config_name):
    principal.init_app(app)
            </code></pre>
            </p>
          </section>
          <section>
            <h2>models.py</h2>
            <p>
            <pre><code data-trim>
roles_users = db.Table('roles_users',
                       db.Column('user_id', db.Integer(),
                                 db.ForeignKey('users.user_id')),
                       db.Column('role_id', db.Integer(),
                                 db.ForeignKey('roles.id')))


class Role(db.Model):
    __tablename__ = 'roles'

    id = db.Column(db.Integer(), primary_key=True)
    name = db.Column(db.String(80), unique=True)
    description = db.Column(db.String(255))
            </code></pre>
            </p>
          </section>
          <section>
            <h2>models.py - User Class</h2>
            <p>
            <pre><code data-trim>
class User(db.Model, UserMixin):
    roles = db.relationship('Role', secondary=roles_users,
                            primaryjoin=user_id == roles_users.c.user_id,
                            backref='users')
            </code></pre>
            </p>
          </section>
          <section>
            <h2>models.py - Identity loader</h2>
            <p>
            <pre><code data-trim>
@identity_loaded.connect
def on_identity_loaded(sender, identity):
    # Set the identity user object
    identity.user = current_user

    # Add the UserNeed to the identity
    if hasattr(current_user, 'id'):
        identity.provides.add(UserNeed(current_user.id))

    # Assuming the User model has a list of roles, update the
    # identity with the roles that the user provides
    if hasattr(current_user, 'roles'):
        for role in current_user.roles:
            identity.provides.add(RoleNeed(role.name))
            </code></pre>
            </p>
          </section>
          <section>
            <h2>auth/views.py</h2>
            <p><pre><code data-trim>
from flask import current_app

from flask.ext.principal import identity_changed, Identity


@auth.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user is not None and user.verify_password(form.password.data):
            login_user(user)
            identity_changed.send(current_app._get_current_object(),
                                  identity=Identity(user.user_id))
            next = request.args.get('next')
            return redirect(next or url_for('main.index'))
        else:
            flash('Wrong username or password.')
    return render_template('auth/login.html', form=form)
            </code></pre></p>
          </section>
          <section>
            <h2>auth/__init__.py</h2>
            <p><pre><code data-trim>
from flask.ext.principal import Permission, RoleNeed

admin_permission = Permission(RoleNeed('admin'))
            </code></pre></p>
          </section>
          <section>
            <h2>main/views.py</h2>
            <p><pre><code data-trim>
from flaskfilled.auth import admin_permission

@main.route('/settings', methods=['GET'])
@admin_permission.require()
def settings():
    return render_template('main/settings.html')
            </code></pre></p>
          </section>
          <section>
            <img data-src="perm_denied.png" />
          </section>
          <section>
            <img data-src="settings.png" />
          </section>
        </section>
        <section>
          <h2>Sending Mail</h2>
          <img data-src="mail.png" />
        </section>
        <section>
          <section>
          <h2>flask-mail</h2>
          <ul>
            <li>Works with Flask config</li>
            <li>Simplies Message Construction</li>
          </ul>
          </section>
          <section>
            <h2>__init__.py</h2>
            <p><pre><code data-trim>
from flask.ext.mail import Mail
mail = Mail()


def create_app(config_name):
    mail.init_app(app)
            </code></pre> </p>
          </section>
          <section>
            <h2>__init__.py</h2>
            <p><pre><code data-trim>
from flask.ext.mail import Mail
mail = Mail()


def create_app(config_name):
    mail.init_app(app)
            </code></pre> </p>
          </section>
          <section>
            <h2>main/views.py</h2>
            <pre><code data-trim>
from flask_mail import Message


@main.route('/mailme', methods=['GET'])
def mail():
    msg = Message('COOKIES!',
                  sender='from@example.com',
                  recipients=['to@example.com'])
    msg.body = 'There all mine!'
    msg.html = '<b>There all mine!</b>'
    mail.send(msg)
            </code></pre>
          </section>
        </section>
        <section>
          <h2>What other things are out there?</h2>
          <ul>
            <li>flask-security</li>
            <li>flask-moment</li>
          </ul>
          <p>https://github.com/humiaozuzu/awesome-flask</p>
        </section>
        <section>
          <img data-src="flask-filled.jpg" height=500px />
        </section>
        <section>
          <h2>Questions</h2>
          <p>Jason Myers / @jasonamyers / Essential SQLAlchemy<br>
          <img data-src="questions.jpg" />
        </section>
			</div>

		</div>

		<script src="lib/js/head.min.js"></script>
		<script src="js/reveal.js"></script>

		<script>

			// Full list of configuration options available at:
			// https://github.com/hakimel/reveal.js#configuration
			Reveal.initialize({
				controls: true,
				progress: true,
				history: true,
				center: true,

				transition: 'slide', // none/fade/slide/convex/concave/zoom

				// Optional reveal.js plugins
				dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true },
					{ src: 'plugin/notes/notes.js', async: true }
				]
			});

		</script>

	</body>
</html>
